// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// GO driver
class libgo {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libgo(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libgo.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void initialize(
    ffi.Pointer<ffi.Void> api,
  ) {
    return _initialize(
      api,
    );
  }

  late final _initializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'initialize');
  late final _initialize =
      _initializePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void loadGame(
    int port,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int size,
  ) {
    return _loadGame(
      port,
      buffer,
      size,
    );
  }

  late final _loadGamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GoInt64, ffi.Pointer<ffi.UnsignedChar>, GoInt)>>('loadGame');
  late final _loadGame = _loadGamePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void handleEvent(
    int port,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int size,
  ) {
    return _handleEvent(
      port,
      buffer,
      size,
    );
  }

  late final _handleEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GoInt64, ffi.Pointer<ffi.UnsignedChar>, GoInt)>>('handleEvent');
  late final _handleEvent = _handleEventPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.UnsignedChar>, int)>();

  void receiveTime(
    int port,
    ffi.Pointer<ffi.UnsignedChar> buffer,
    int size,
  ) {
    return _receiveTime(
      port,
      buffer,
      size,
    );
  }

  late final _receiveTimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              GoInt64, ffi.Pointer<ffi.UnsignedChar>, GoInt)>>('receiveTime');
  late final _receiveTime = _receiveTimePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.UnsignedChar>, int)>();
}

final class max_align_t extends ffi.Opaque {}

final class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Char> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Long;

final class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

final class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.LongLong;

const int NULL = 0;
